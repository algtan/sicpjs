// Section 1.2.1
// page 31

// The following function computes a mathematical function called Ackermann's function.

function A(x, y) {
    return y === 0
           ? 0
           : x === 0
           ? 2 * y
           : y === 1
           ? 2
           : A(x - 1, A(x, y - 1));
}

// * Part 1 *
// What are the values of the following statements?

// * Part 1a *
A(1, 10);
// A(1, 10) //
// A(1 - 1, A(1, 10 - 1))

// A(0, A(1, 9))

// A(1, 9) //
// A(1 - 1, A(1, 9 - 1))
// A(0, A(1, 8))

// A(0, A(0, A(1, 9)))

// A(1, 8) //
// A(1 - 1, A(1, 8 - 1))
// A(0, A(1, 7))

// A(0, A(0, A(0, A(1, 7))))

// A(1, 7) //
// A(1 - 1, A(1, 7 - 1))
// A(0, A(1, 6))

// A(0, A(0, A(0, A(0, A(1, 6)))))

// A(1, 6) //
// A(1 - 1, A(1, 6 - 1))
// A(0, A(1, 5))

// A(0, A(0, A(0, A(0, A((0, A(1, 5))))))

// A(1, 5) //
// A(1 - 1, A(1, 5 - 1))
// A(0, A(1, 4))

// A(0, A(0, A(0, A(0, A((0, A(0, A(1, 4))))))))

// A(1, 4) //
// A(1 - 1, A(1, 4 - 1))
// A(0, A(1, 3))

// A(0, A(0, A(0, A(0, A((0, A(0, A(0, A(1, 3)))))))))

// A(1, 3) //
// A(1 - 1, A(1, 3 - 1))
// A(0, A(1, 2))

// A(0, A(0, A(0, A(0, A((0, A(0, A(0, A(0, A(1, 2))))))))))

// A(1, 2) //
// A(1 - 1, A(1, 2 - 1))
// A(0, A(1, 1))

// A(0, A(0, A(0, A(0, A((0, A(0, A(0, A(0, A(0, A(1,1)))))))))))

// A(1, 1) //
// 2

// A(0, A(0, A(0, A(0, A((0, A(0, A(0, A(0, A(0, 2))))))))))

// A(0, 2) //
// 2 * 2
// 4

// A(0, A(0, A(0, A(0, A((0, A(0, A(0, A(0, 4)))))))))

// A(0, 4) //
// 2 * 4
// 8

// A(0, A(0, A(0, A(0, A((0, A(0, A(0, 8))))))))

// A(0, 8)
// 2 * 8
// 16

// A(0, A(0, A(0, A(0, A((0, A(0, 16)))))))

// A(0, 16)
// 2 * 16
// 32

// A(0, A(0, A(0, A(0, A((0, 32))))))

// A(0, 32)
// 2 * 32
// 64

// A(0, A(0, A(0, A(0, 64)))))

// A(0, 64)
// 2 * 64
// 128

// A(0, A(0, A(0, 128)))

// A(0, 128)
// 2 * 128
// 256

// A(0, A(0, 256))

// A(0, 256)
// 2 * 256
// 512

// A(0, 512)
// 2 * 512
// 1024

// 1024